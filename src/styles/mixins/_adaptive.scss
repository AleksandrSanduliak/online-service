@function prc($pxOne, $pxTwo) {
    $result: math.div($pxOne, $pxTwo) * 100%;
    @return $result;
}

// TO REM
@function rem($px) {
    $result: math.div($px, 16) + rem;
    @return $result;
}

// TO EM
@function em($px) {
    $result: math.div($px, 16) + em;
    @return $result;
}

$maxWidth: 120;
$maxWidthContainer: 103.125;
@mixin adaptiv($property, $startSize, $minSize) {
  $addSize: $startSize - $minSize;
    #{$property}: $startSize + rem;

    @media (max-width: #{$maxWidthContainer + rem}) {
      #{$property}: calc(#{$minSize + rem} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }

}
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;

  @if $type==1 {
    // Только если меньше контейнера
    #{$property}: $startSize + rem;

    @media (max-width: #{$maxWidthContainer + rem}) {
      #{$property}: calc(#{$minSize + rem} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }

  @else if $type==2 {
    // Только если больше контейнера
    #{$property}: $startSize + rem;

    @media (min-width: #{$maxWidthContainer + rem}) {
      #{$property}: calc(#{$minSize + rem} #{$addSize} * ((100vw - 20rem) / #{$maxWidth - 320}));
    }
  }

  @else {
    // Всегда
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
  }
}

